name: PR Automation

on:
  pull_request:
    types: [opened]
  issue_comment:
    types: [created]

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  welcome:
    if: github.event_name == 'pull_request' && github.event.action == 'opened'
    runs-on: ubuntu-latest
    steps:
      - name: Welcome PR
        uses: actions/github-script@v7
        with:
          script: |
            const body = `👋 Welcome to The Profit Platform!

            **Available Swarm Commands:**
            - \`/swarm review\` - AI code review
            - \`/swarm test\` - Run automated tests
            - \`/swarm optimize\` - Performance analysis
            - \`/swarm docs\` - Generate documentation
            - \`/swarm security\` - Security audit

            Type any command in a comment to activate!`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });

  swarm-commands:
    if: github.event_name == 'issue_comment' && contains(github.event.comment.body, '/swarm')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Process Swarm Command
        uses: actions/github-script@v7
        with:
          script: |
            const comment = context.payload.comment.body;
            const commands = {
              '/swarm review': '🔍 Starting AI code review...',
              '/swarm test': '🧪 Running automated tests...',
              '/swarm optimize': '⚡ Analyzing performance...',
              '/swarm docs': '📚 Generating documentation...',
              '/swarm security': '🔒 Running security audit...'
            };

            let responseBody = '❌ Unknown command';

            for (const [cmd, response] of Object.entries(commands)) {
              if (comment.includes(cmd)) {
                responseBody = response;
                break;
              }
            }

            // React to command
            await github.rest.reactions.createForIssueComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: context.payload.comment.id,
              content: 'rocket'
            });

            // Send response
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: responseBody
            });