---
import BaseLayout from '../layouts/BaseLayout.astro';
---

<BaseLayout title="n8n Workflow Triggers | The Profit Platform">
  <style>
    .n8n-container {
      min-height: 100vh;
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      padding: 60px 20px;
      display: flex;
      align-items: center;
      justify-content: center;
    }

    .n8n-content {
      max-width: 1200px;
      width: 100%;
      background: white;
      border-radius: 20px;
      padding: 40px;
      box-shadow: 0 20px 60px rgba(0, 0, 0, 0.3);
    }

    .n8n-header {
      text-align: center;
      margin-bottom: 40px;
    }

    .n8n-header h1 {
      font-size: 2.5rem;
      font-weight: 900;
      background: linear-gradient(135deg, #2c86f9 0%, #667eea 50%, #764ba2 100%);
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
      background-clip: text;
      margin-bottom: 10px;
    }

    .n8n-header p {
      color: #64748b;
      font-size: 1.1rem;
    }

    .password-form {
      max-width: 400px;
      margin: 0 auto;
      text-align: center;
    }

    .password-input {
      width: 100%;
      padding: 15px 20px;
      font-size: 1rem;
      border: 2px solid #e2e8f0;
      border-radius: 12px;
      margin-bottom: 15px;
      transition: border-color 0.3s;
    }

    .password-input:focus {
      outline: none;
      border-color: #3b82f6;
    }

    .workflows-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
      gap: 20px;
      margin-top: 30px;
    }

    .workflow-card {
      background: linear-gradient(135deg, #f8fafc 0%, #f1f5f9 100%);
      border: 2px solid #e2e8f0;
      border-radius: 16px;
      padding: 30px;
      text-align: center;
      transition: all 0.3s;
    }

    .workflow-card:hover {
      transform: translateY(-5px);
      box-shadow: 0 10px 30px rgba(59, 130, 246, 0.2);
      border-color: #3b82f6;
    }

    .workflow-icon {
      font-size: 3rem;
      margin-bottom: 15px;
      display: block;
    }

    .workflow-name {
      font-size: 1.3rem;
      font-weight: 700;
      color: #1e293b;
      margin-bottom: 20px;
    }

    .workflow-btn {
      width: 100%;
      padding: 15px 30px;
      background: linear-gradient(135deg, #3b82f6 0%, #2563eb 100%);
      color: white;
      border: none;
      border-radius: 12px;
      font-size: 1rem;
      font-weight: 600;
      cursor: pointer;
      transition: all 0.3s;
      display: flex;
      align-items: center;
      justify-content: center;
      gap: 10px;
    }

    .workflow-btn:hover:not(:disabled) {
      background: linear-gradient(135deg, #2563eb 0%, #1d4ed8 100%);
      transform: scale(1.05);
    }

    .workflow-btn:disabled {
      opacity: 0.6;
      cursor: not-allowed;
    }

    .workflow-btn.loading {
      background: linear-gradient(135deg, #64748b 0%, #475569 100%);
    }

    .btn-primary {
      padding: 15px 40px;
      background: linear-gradient(135deg, #3b82f6 0%, #2563eb 100%);
      color: white;
      border: none;
      border-radius: 12px;
      font-size: 1.1rem;
      font-weight: 600;
      cursor: pointer;
      transition: all 0.3s;
    }

    .btn-primary:hover {
      background: linear-gradient(135deg, #2563eb 0%, #1d4ed8 100%);
      transform: scale(1.05);
    }

    .toast {
      position: fixed;
      bottom: 30px;
      right: 30px;
      padding: 20px 30px;
      border-radius: 12px;
      color: white;
      font-weight: 600;
      box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
      animation: slideIn 0.3s ease-out;
      z-index: 1000;
    }

    .toast.success {
      background: linear-gradient(135deg, #10b981 0%, #059669 100%);
    }

    .toast.error {
      background: linear-gradient(135deg, #ef4444 0%, #dc2626 100%);
    }

    @keyframes slideIn {
      from {
        transform: translateX(400px);
        opacity: 0;
      }
      to {
        transform: translateX(0);
        opacity: 1;
      }
    }

    .loading-spinner {
      display: inline-block;
      width: 16px;
      height: 16px;
      border: 2px solid rgba(255, 255, 255, 0.3);
      border-radius: 50%;
      border-top-color: white;
      animation: spin 0.6s linear infinite;
    }

    @keyframes spin {
      to { transform: rotate(360deg); }
    }

    .error-message {
      background: #fee2e2;
      color: #991b1b;
      padding: 15px;
      border-radius: 8px;
      margin-top: 10px;
      text-align: center;
    }

    @media (max-width: 768px) {
      .n8n-header h1 {
        font-size: 2rem;
      }

      .workflows-grid {
        grid-template-columns: 1fr;
      }
    }
  </style>

  <div class="n8n-container">
    <div class="n8n-content">
      <div class="n8n-header">
        <h1>ü§ñ n8n Workflow Triggers</h1>
        <p>Click a button to manually run your automation workflows</p>
      </div>

      <!-- Password Form (shown if password is required) -->
      <div id="passwordSection" style="display: none;">
        <form class="password-form" id="passwordForm">
          <input
            type="password"
            id="passwordInput"
            class="password-input"
            placeholder="Enter password to access workflows"
            required
          />
          <button type="submit" class="btn-primary">Unlock Workflows</button>
          <div id="passwordError" class="error-message" style="display: none;"></div>
        </form>
      </div>

      <!-- Workflows Grid (shown after authentication or if no password required) -->
      <div id="workflowsSection" style="display: none;">
        <div id="workflowsGrid" class="workflows-grid">
          <!-- Workflows will be dynamically loaded here -->
        </div>
      </div>

      <!-- Loading State -->
      <div id="loadingState" style="text-align: center; padding: 40px;">
        <div class="loading-spinner" style="width: 40px; height: 40px; border-width: 4px; margin: 0 auto;"></div>
        <p style="margin-top: 20px; color: #64748b;">Loading workflows...</p>
      </div>
    </div>
  </div>

  <script>
    // Use environment variable or fallback to localhost for development
    const API_URL = import.meta.env.PUBLIC_API_URL || 'http://localhost:4321';
    let currentPassword = '';

    // Show toast notification
    function showToast(message, type = 'success') {
      const toast = document.createElement('div');
      toast.className = `toast ${type}`;
      toast.textContent = message;
      document.body.appendChild(toast);

      setTimeout(() => {
        toast.remove();
      }, 3000);
    }

    // Load workflows
    async function loadWorkflows(password = '') {
      try {
        const url = password
          ? `${API_URL}/api/n8n/workflows?password=${encodeURIComponent(password)}`
          : `${API_URL}/api/n8n/workflows`;

        const response = await fetch(url);
        const data = await response.json();

        if (!response.ok) {
          if (response.status === 401) {
            document.getElementById('loadingState').style.display = 'none';
            document.getElementById('passwordSection').style.display = 'block';
            const errorEl = document.getElementById('passwordError');
            errorEl.textContent = data.error || 'Invalid password';
            errorEl.style.display = 'block';
            return;
          }
          throw new Error(data.error || 'Failed to load workflows');
        }

        currentPassword = password;

        // Hide password section and loading
        document.getElementById('passwordSection').style.display = 'none';
        document.getElementById('loadingState').style.display = 'none';

        // Show workflows
        const grid = document.getElementById('workflowsGrid');
        grid.innerHTML = '';

        if (data.workflows.length === 0) {
          grid.innerHTML = '<p style="text-align: center; color: #64748b; grid-column: 1/-1;">No workflows configured. Add workflows to your .env file.</p>';
        } else {
          data.workflows.forEach(workflow => {
            const card = document.createElement('div');
            card.className = 'workflow-card';
            card.innerHTML = `
              <span class="workflow-icon">${workflow.icon}</span>
              <h3 class="workflow-name">${workflow.name}</h3>
              <button class="workflow-btn" onclick="triggerWorkflow('${workflow.id}', '${workflow.name}')">
                <span>Run Workflow</span>
              </button>
            `;
            grid.appendChild(card);
          });
        }

        document.getElementById('workflowsSection').style.display = 'block';

      } catch (error) {
        console.error('Load workflows error:', error);
        showToast('Failed to load workflows', 'error');
        document.getElementById('loadingState').innerHTML = `
          <p style="color: #ef4444; margin-top: 20px;">${error.message}</p>
        `;
      }
    }

    // Trigger workflow
    async function triggerWorkflow(workflowId, workflowName) {
      const button = event.target.closest('.workflow-btn');
      const originalContent = button.innerHTML;

      try {
        button.disabled = true;
        button.classList.add('loading');
        button.innerHTML = '<div class="loading-spinner"></div><span>Running...</span>';

        const response = await fetch(`${API_URL}/api/n8n/trigger`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            workflowId,
            password: currentPassword
          })
        });

        const data = await response.json();

        if (!response.ok) {
          throw new Error(data.error || 'Failed to trigger workflow');
        }

        showToast(`‚úÖ ${data.message}`, 'success');

      } catch (error) {
        console.error('Trigger error:', error);
        showToast(`‚ùå ${error.message}`, 'error');
      } finally {
        button.disabled = false;
        button.classList.remove('loading');
        button.innerHTML = originalContent;
      }
    }

    // Make triggerWorkflow available globally
    window.triggerWorkflow = triggerWorkflow;

    // Handle password form
    document.getElementById('passwordForm')?.addEventListener('submit', async (e) => {
      e.preventDefault();
      const password = document.getElementById('passwordInput').value;
      document.getElementById('passwordError').style.display = 'none';
      await loadWorkflows(password);
    });

    // Initial load
    loadWorkflows();
  </script>
</BaseLayout>
