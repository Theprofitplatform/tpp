---
import { getCollection } from 'astro:content';
import BaseLayout from '../../layouts/BaseLayout.astro';

export async function getStaticPaths() {
  const services = await getCollection('services', ({ data }) => {
    return !data.draft;
  });

  const blogPosts = await getCollection('blog', ({ data }) => {
    return !data.draft;
  });

  return services.map(service => {
    // Get related services (share tags, exclude current)
    const relatedServices = services
      .filter(s => s.slug !== service.slug)
      .filter(s => service.data.tags?.some(tag => s.data.tags?.includes(tag)))
      .slice(0, 3);

    // Get related blog posts (matching category or tags) with cleaned slugs
    const relatedPosts = blogPosts
      .filter(post =>
        post.data.category === service.data.category ||
        service.data.tags?.some(tag => post.data.tags?.includes(tag))
      )
      .slice(0, 3)
      .map(post => ({
        ...post,
        cleanSlug: post.slug.replace(/^\d{4}-\d{2}-\d{2}-/, '')
      }));

    return {
      params: { slug: service.slug },
      props: { service, relatedServices, relatedPosts },
    };
  });
}

const { service, relatedServices, relatedPosts } = Astro.props;
const { Content } = await service.render();

const schema = {
  "@context": "https://schema.org",
  "@type": "Service",
  "name": service.data.title,
  "description": service.data.description,
  "provider": {
    "@type": "Organization",
    "name": "The Profit Platform"
  }
};
---

<BaseLayout
  title={service.data.title}
  description={service.data.description}
>
  <script type="application/ld+json" set:html={JSON.stringify(schema)} />

  <article class="service-detail">
    <header class="service-header">
      <div class="container">
        {service.data.icon && <span class="service-icon">{service.data.icon}</span>}
        <h1>{service.data.title}</h1>
        <p class="service-description">{service.data.description}</p>

        {service.data.price && (
          <div class="service-meta">
            <span class="price">{service.data.price}</span>
            {service.data.duration && <span class="duration">{service.data.duration}</span>}
          </div>
        )}

        {service.data.tags.length > 0 && (
          <div class="tags">
            {service.data.tags.map(tag => (
              <span class="tag">{tag}</span>
            ))}
          </div>
        )}
      </div>
    </header>

    <div class="container">
      <div class="service-content">
        <Content />
      </div>

      <aside class="service-cta">
        <h3>Ready to get started?</h3>
        <p>Let's discuss how we can help your business grow.</p>
        <a href="/contact" class="cta-button">Get in Touch</a>
      </aside>
    </div>

    {relatedServices && relatedServices.length > 0 && (
      <section class="related-services">
        <div class="container">
          <h3 class="section-title">Related Services</h3>
          <div class="related-grid">
            {relatedServices.map((relatedService) => {
              const serviceHref = `/services/${relatedService.slug}`;
              return (
                <article class="related-card">
                  <a href={serviceHref} class="related-link">
                    {relatedService.data.icon && (
                      <span class="related-icon">{relatedService.data.icon}</span>
                    )}
                    <h4 class="related-title">{relatedService.data.title}</h4>
                    <p class="related-description">{relatedService.data.description}</p>
                    <span class="related-cta">Learn More â†’</span>
                  </a>
                </article>
              );
            })}
          </div>
        </div>
      </section>
    )}

    {relatedPosts && relatedPosts.length > 0 && (
      <section class="related-posts">
        <div class="container">
          <h3 class="section-title">Related Articles</h3>
          <div class="related-grid">
            {relatedPosts.map((post) => {
              const blogHref = `/blog/${post.cleanSlug}`;
              const publishDate = post.data.publishDate || post.data.pubDate || new Date();
              return (
                <article class="related-card">
                  <a href={blogHref} class="related-link">
                    <span class="related-category">{post.data.category}</span>
                    <h4 class="related-title">{post.data.title}</h4>
                    <p class="related-description">{post.data.description}</p>
                    <time datetime={publishDate.toISOString()}>
                      {publishDate.toLocaleDateString('en-AU', { month: 'short', day: 'numeric', year: 'numeric' })}
                    </time>
                  </a>
                </article>
              );
            })}
          </div>
        </div>
      </section>
    )}
  </article>
</BaseLayout>

<style>
  .service-header {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
    padding: 4rem 0 3rem;
    text-align: center;
  }

  .service-icon {
    font-size: 4rem;
    display: block;
    margin-bottom: 1rem;
  }

  h1 {
    font-size: 2.5rem;
    margin-bottom: 1rem;
  }

  .service-description {
    font-size: 1.25rem;
    margin-bottom: 1.5rem;
    opacity: 0.95;
  }

  .service-meta {
    display: flex;
    gap: 2rem;
    justify-content: center;
    margin: 1.5rem 0;
    font-size: 1.1rem;
  }

  .tags {
    display: flex;
    gap: 0.5rem;
    justify-content: center;
    flex-wrap: wrap;
    margin-top: 1rem;
  }

  .tag {
    background: rgba(255, 255, 255, 0.2);
    padding: 0.25rem 0.75rem;
    border-radius: 20px;
    font-size: 0.875rem;
  }

  .container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 1.5rem;
  }

  .service-content {
    max-width: 800px;
    margin: 3rem auto;
    line-height: 1.8;
  }

  .service-content :global(h2) {
    margin-top: 2rem;
    margin-bottom: 1rem;
    color: #333;
  }

  .service-content :global(h3) {
    margin-top: 1.5rem;
    margin-bottom: 0.75rem;
    color: #555;
  }

  .service-content :global(ul) {
    margin: 1rem 0;
    padding-left: 1.5rem;
  }

  .service-content :global(li) {
    margin: 0.5rem 0;
  }

  .service-cta {
    background: #f8f9fa;
    border: 2px solid #e9ecef;
    border-radius: 8px;
    padding: 2rem;
    text-align: center;
    margin: 3rem auto;
    max-width: 600px;
  }

  .service-cta h3 {
    margin-bottom: 0.5rem;
  }

  .cta-button {
    display: inline-block;
    background: #667eea;
    color: white;
    padding: 1rem 2rem;
    border-radius: 6px;
    text-decoration: none;
    font-weight: 600;
    margin-top: 1rem;
    transition: background 0.3s;
  }

  .cta-button:hover {
    background: #5568d3;
  }

  @media (max-width: 768px) {
    h1 {
      font-size: 2rem;
    }

    .service-description {
      font-size: 1rem;
    }

    .service-meta {
      flex-direction: column;
      gap: 0.5rem;
    }
  }

  /* Related Content Sections */
  .related-services,
  .related-posts {
    background: #f8f9fa;
    padding: 3rem 0;
    margin-top: 3rem;
  }

  .section-title {
    font-size: 1.75rem;
    font-weight: 700;
    text-align: center;
    margin-bottom: 2rem;
    color: #333;
  }

  .related-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 2rem;
    max-width: 1200px;
    margin: 0 auto;
  }

  .related-card {
    background: white;
    border-radius: 12px;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    transition: all 0.3s ease;
    overflow: hidden;
  }

  .related-card:hover {
    box-shadow: 0 8px 24px rgba(0, 0, 0, 0.15);
    transform: translateY(-4px);
  }

  .related-link {
    display: block;
    padding: 1.5rem;
    text-decoration: none;
    color: inherit;
    height: 100%;
  }

  .related-icon {
    font-size: 2.5rem;
    display: block;
    margin-bottom: 1rem;
  }

  .related-category {
    display: inline-block;
    background: #667eea;
    color: white;
    padding: 0.25rem 0.75rem;
    border-radius: 20px;
    font-size: 0.75rem;
    font-weight: 600;
    margin-bottom: 0.75rem;
    text-transform: uppercase;
    letter-spacing: 0.5px;
  }

  .related-title {
    font-size: 1.25rem;
    font-weight: 700;
    margin-bottom: 0.75rem;
    color: #333;
    line-height: 1.3;
  }

  .related-card:hover .related-title {
    color: #667eea;
  }

  .related-description {
    color: #666;
    font-size: 0.9375rem;
    line-height: 1.6;
    margin-bottom: 1rem;
    display: -webkit-box;
    -webkit-line-clamp: 3;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }

  .related-cta {
    color: #667eea;
    font-weight: 600;
    font-size: 0.9375rem;
  }

  .related-card time {
    display: block;
    color: #999;
    font-size: 0.875rem;
    margin-top: 1rem;
  }

  @media (max-width: 768px) {
    .related-grid {
      grid-template-columns: 1fr;
      gap: 1.5rem;
    }

    .section-title {
      font-size: 1.5rem;
    }
  }
</style>
