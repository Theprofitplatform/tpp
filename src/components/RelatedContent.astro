---
import { getCollection } from 'astro:content';

interface Props {
  category?: string;
  tags?: string[];
  currentPage?: string;
  showTools?: boolean;
  showBlogPosts?: boolean;
  showServices?: boolean;
}

const {
  category = '',
  tags = [],
  currentPage = '',
  showTools = false,
  showBlogPosts = true,
  showServices = false
} = Astro.props;

let relatedBlogPosts: any[] = [];
let relatedServices: any[] = [];

// Fetch related blog posts if requested
if (showBlogPosts) {
  const allBlogPosts = await getCollection('blog', ({ data }) => !data.draft);

  relatedBlogPosts = allBlogPosts
    .filter(post => {
      // Match by category or tags
      const matchesCategory = category && post.data.category === category;
      const matchesTags = tags.length > 0 && tags.some(tag => post.data.tags?.includes(tag));
      return matchesCategory || matchesTags;
    })
    .slice(0, 3)
    .map(post => ({
      ...post,
      cleanSlug: post.slug.replace(/^\d{4}-\d{2}-\d{2}-/, '')
    }));
}

// Fetch related services if requested
if (showServices) {
  const allServices = await getCollection('services', ({ data }) => !data.draft);

  relatedServices = allServices
    .filter(service => {
      // Match by tags
      const matchesTags = tags.length > 0 && tags.some(tag => service.data.tags?.includes(tag));
      return matchesTags;
    })
    .slice(0, 3);
}
---

{/* Related Blog Posts */}
{relatedBlogPosts && relatedBlogPosts.length > 0 && (
  <section class="related-content-section">
    <div class="container">
      <h3 class="section-title">Related Articles</h3>
      <div class="related-grid">
        {relatedBlogPosts.map((post) => {
          const blogHref = `/blog/${post.cleanSlug}`;
          const publishDate = post.data.publishDate || post.data.pubDate || new Date();
          return (
            <article class="related-card">
              <a href={blogHref} class="related-link">
                <span class="related-category">{post.data.category}</span>
                <h4 class="related-title">{post.data.title}</h4>
                <p class="related-description">{post.data.description}</p>
                <time datetime={publishDate.toISOString()}>
                  {publishDate.toLocaleDateString('en-AU', { month: 'short', day: 'numeric', year: 'numeric' })}
                </time>
              </a>
            </article>
          );
        })}
      </div>
    </div>
  </section>
)}

{/* Related Services */}
{relatedServices && relatedServices.length > 0 && (
  <section class="related-content-section">
    <div class="container">
      <h3 class="section-title">Related Services</h3>
      <div class="related-grid">
        {relatedServices.map((service) => {
          const serviceHref = `/services/${service.slug}`;
          return (
            <article class="related-card">
              <a href={serviceHref} class="related-link">
                {service.data.icon && (
                  <span class="related-icon">{service.data.icon}</span>
                )}
                <h4 class="related-title">{service.data.title}</h4>
                <p class="related-description">{service.data.description}</p>
                <span class="related-cta">Learn More â†’</span>
              </a>
            </article>
          );
        })}
      </div>
    </div>
  </section>
)}

<style>
  .related-content-section {
    background: #f8f9fa;
    padding: 3rem 0;
    margin-top: 3rem;
  }

  .container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 1.5rem;
  }

  .section-title {
    font-size: 1.75rem;
    font-weight: 700;
    text-align: center;
    margin-bottom: 2rem;
    color: #333;
  }

  .related-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 2rem;
  }

  .related-card {
    background: white;
    border-radius: 12px;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    transition: all 0.3s ease;
    overflow: hidden;
  }

  .related-card:hover {
    box-shadow: 0 8px 24px rgba(0, 0, 0, 0.15);
    transform: translateY(-4px);
  }

  .related-link {
    display: block;
    padding: 1.5rem;
    text-decoration: none;
    color: inherit;
    height: 100%;
  }

  .related-icon {
    font-size: 2.5rem;
    display: block;
    margin-bottom: 1rem;
  }

  .related-category {
    display: inline-block;
    background: #667eea;
    color: white;
    padding: 0.25rem 0.75rem;
    border-radius: 20px;
    font-size: 0.75rem;
    font-weight: 600;
    margin-bottom: 0.75rem;
    text-transform: uppercase;
    letter-spacing: 0.5px;
  }

  .related-title {
    font-size: 1.25rem;
    font-weight: 700;
    margin-bottom: 0.75rem;
    color: #333;
    line-height: 1.3;
  }

  .related-card:hover .related-title {
    color: #667eea;
  }

  .related-description {
    color: #666;
    font-size: 0.9375rem;
    line-height: 1.6;
    margin-bottom: 1rem;
    display: -webkit-box;
    -webkit-line-clamp: 3;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }

  .related-cta {
    color: #667eea;
    font-weight: 600;
    font-size: 0.9375rem;
  }

  .related-card time {
    display: block;
    color: #999;
    font-size: 0.875rem;
    margin-top: 1rem;
  }

  @media (max-width: 768px) {
    .related-grid {
      grid-template-columns: 1fr;
      gap: 1.5rem;
    }

    .section-title {
      font-size: 1.5rem;
    }
  }
</style>
