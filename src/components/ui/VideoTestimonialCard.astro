---
/**
 * VideoTestimonialCard Component
 * Video testimonial with modal lightbox
 *
 * @prop {string} videoUrl - Video URL (YouTube, Vimeo, or direct MP4)
 * @prop {string} thumbnail - Video thumbnail image
 * @prop {string} author - Testimonial author name
 * @prop {string} role - Author's role/company
 * @prop {string} [quote] - Optional text quote
 *
 * Example:
 * <VideoTestimonialCard
 *   videoUrl="https://www.youtube.com/embed/dQw4w9WgXcQ"
 *   thumbnail="/images/testimonial-thumb.jpg"
 *   author="Sarah Johnson"
 *   role="CEO, TechCorp"
 *   quote="Working with this team transformed our business"
 * />
 */

interface Props {
  videoUrl: string;
  thumbnail: string;
  author: string;
  role: string;
  quote?: string;
}

const { videoUrl, thumbnail, author, role, quote } = Astro.props;
const cardId = `video-${Math.random().toString(36).substr(2, 9)}`;
---

<div class="bg-white rounded-2xl shadow-lg overflow-hidden">
  <!-- Video Thumbnail with Play Button -->
  <button
    class="relative w-full aspect-video group cursor-pointer focus:outline-none focus:ring-4 focus:ring-blue-600"
    data-video-trigger={cardId}
    aria-label={`Play video testimonial from ${author}`}
  >
    <img
      src={thumbnail}
      alt={`${author} testimonial`}
      class="w-full h-full object-cover"
      loading="lazy"
    />

    <!-- Overlay -->
    <div class="absolute inset-0 bg-black/30 group-hover:bg-black/40 transition-colors"></div>

    <!-- Play Button -->
    <div class="absolute inset-0 flex items-center justify-center">
      <div class="w-20 h-20 bg-white rounded-full flex items-center justify-center group-hover:scale-110 transition-transform shadow-2xl">
        <svg class="h-10 w-10 text-blue-600 ml-1" fill="currentColor" viewBox="0 0 24 24">
          <path d="M8 5v14l11-7z"/>
        </svg>
      </div>
    </div>
  </button>

  <!-- Author Info -->
  <div class="p-6">
    {quote && (
      <p class="text-gray-700 mb-4 italic">"{quote}"</p>
    )}
    <div class="flex items-center gap-3">
      <div class="w-12 h-12 rounded-full bg-blue-600 flex items-center justify-center text-white font-bold text-lg">
        {author.charAt(0)}
      </div>
      <div>
        <div class="font-semibold text-gray-900">{author}</div>
        <div class="text-sm text-gray-600">{role}</div>
      </div>
    </div>
  </div>
</div>

<!-- Video Modal -->
<div
  class="fixed inset-0 bg-black/90 z-50 hidden items-center justify-center p-4"
  data-video-modal={cardId}
  role="dialog"
  aria-modal="true"
  aria-label="Video testimonial"
>
  <div class="relative w-full max-w-4xl">
    <!-- Close Button -->
    <button
      class="absolute -top-12 right-0 text-white hover:text-gray-300 transition-colors"
      data-video-close={cardId}
      aria-label="Close video"
    >
      <svg class="h-8 w-8" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
      </svg>
    </button>

    <!-- Video Container -->
    <div class="relative aspect-video bg-black rounded-lg overflow-hidden">
      <div data-video-container={cardId}></div>
    </div>
  </div>
</div>

<script define:vars={{ videoUrl, cardId }}>
  const trigger = document.querySelector(`[data-video-trigger="${cardId}"]`);
  const modal = document.querySelector(`[data-video-modal="${cardId}"]`);
  const closeBtn = document.querySelector(`[data-video-close="${cardId}"]`);
  const container = document.querySelector(`[data-video-container="${cardId}"]`);

  const openModal = () => {
    modal?.classList.remove('hidden');
    modal?.classList.add('flex');

    // Create iframe
    const iframe = document.createElement('iframe');
    iframe.className = 'w-full h-full';
    iframe.src = videoUrl + (videoUrl.includes('?') ? '&' : '?') + 'autoplay=1';
    iframe.allow = 'accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture';
    iframe.allowFullscreen = true;
    container?.appendChild(iframe);

    // Prevent body scroll
    document.body.style.overflow = 'hidden';
  };

  const closeModal = () => {
    modal?.classList.add('hidden');
    modal?.classList.remove('flex');

    // Remove iframe
    if (container) {
      container.innerHTML = '';
    }

    // Restore body scroll
    document.body.style.overflow = '';
  };

  trigger?.addEventListener('click', openModal);
  closeBtn?.addEventListener('click', closeModal);

  // Close on Esc key
  document.addEventListener('keydown', (e) => {
    if (e.key === 'Escape' && !modal?.classList.contains('hidden')) {
      closeModal();
    }
  });

  // Close on backdrop click
  modal?.addEventListener('click', (e) => {
    if (e.target === modal) {
      closeModal();
    }
  });
</script>