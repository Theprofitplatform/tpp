---
/**
 * MegaMenu Component
 * Multi-column dropdown with icons, subheadings, and descriptions
 * Fully accessible with keyboard navigation (Tab, Arrow keys, Esc)
 *
 * @prop {string} label - Menu trigger label
 * @prop {Array} items - Menu items grouped by columns
 *
 * Example:
 * <MegaMenu
 *   label="Services"
 *   items={[
 *     {
 *       heading: "Digital Marketing",
 *       links: [
 *         { label: "SEO Services", href: "/seo", icon: "🔍", description: "Rank higher on Google" },
 *         { label: "Google Ads", href: "/google-ads", icon: "📊", description: "Pay-per-click advertising" }
 *       ]
 *     }
 *   ]}
 * />
 */

interface MenuItem {
  label: string;
  href: string;
  icon?: string;
  description?: string;
}

interface MenuColumn {
  heading: string;
  links: MenuItem[];
}

interface Props {
  label: string;
  items: MenuColumn[];
}

const { label, items } = Astro.props;
const menuId = `megamenu-${Math.random().toString(36).substr(2, 9)}`;
---

<div class="relative" data-megamenu>
  <button
    type="button"
    class="inline-flex items-center gap-2 px-4 py-2 text-gray-700 hover:text-gray-900 font-medium transition-colors focus:outline-none focus:ring-2 focus:ring-blue-600 rounded-lg"
    aria-expanded="false"
    aria-haspopup="true"
    aria-controls={menuId}
    data-megamenu-trigger
  >
    {label}
    <svg class="h-4 w-4 transition-transform" fill="none" viewBox="0 0 24 24" stroke="currentColor" aria-hidden="true">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
    </svg>
  </button>

  <div
    id={menuId}
    class="hidden absolute left-0 top-full mt-2 w-screen max-w-4xl bg-white rounded-xl shadow-2xl border border-gray-200 z-50"
    data-megamenu-panel
    role="menu"
  >
    <div class="p-8 grid gap-8 grid-cols-1 md:grid-cols-2 lg:grid-cols-3">
      {items.map((column) => (
        <div>
          <h3 class="text-sm font-bold text-gray-900 uppercase tracking-wide mb-4">
            {column.heading}
          </h3>
          <ul class="space-y-3">
            {column.links.map((link) => (
              <li>
                <a
                  href={link.href}
                  class="group flex items-start gap-3 p-2 rounded-lg hover:bg-gray-50 transition-colors focus:outline-none focus:ring-2 focus:ring-blue-600"
                  role="menuitem"
                >
                  {link.icon && (
                    <span class="text-2xl mt-0.5" aria-hidden="true">{link.icon}</span>
                  )}
                  <div class="flex-1">
                    <div class="font-semibold text-gray-900 group-hover:text-blue-600 transition-colors">
                      {link.label}
                    </div>
                    {link.description && (
                      <div class="text-sm text-gray-500 mt-0.5">
                        {link.description}
                      </div>
                    )}
                  </div>
                </a>
              </li>
            ))}
          </ul>
        </div>
      ))}
    </div>
  </div>
</div>

<script>
  document.querySelectorAll('[data-megamenu]').forEach((menu) => {
    const trigger = menu.querySelector('[data-megamenu-trigger]');
    const panel = menu.querySelector('[data-megamenu-panel]');
    const links = panel?.querySelectorAll('a');

    let isOpen = false;

    const open = () => {
      isOpen = true;
      trigger?.setAttribute('aria-expanded', 'true');
      panel?.classList.remove('hidden');
      panel?.querySelector('a')?.focus();
    };

    const close = () => {
      isOpen = false;
      trigger?.setAttribute('aria-expanded', 'false');
      panel?.classList.add('hidden');
    };

    const toggle = () => (isOpen ? close() : open());

    // Click to toggle
    trigger?.addEventListener('click', toggle);

    // Esc to close
    menu.addEventListener('keydown', (e: KeyboardEvent) => {
      if (e.key === 'Escape' && isOpen) {
        close();
        (trigger as HTMLElement)?.focus();
      }
    });

    // Tab navigation
    links?.forEach((link, index) => {
      link.addEventListener('keydown', (e: KeyboardEvent) => {
        if (e.key === 'Tab' && !e.shiftKey && index === links.length - 1) {
          close();
        }
      });
    });

    // Click outside to close
    document.addEventListener('click', (e) => {
      if (isOpen && !menu.contains(e.target as Node)) {
        close();
      }
    });
  });
</script>

<style>
  @media (prefers-reduced-motion: reduce) {
    * {
      transition: none !important;
    }
  }
</style>