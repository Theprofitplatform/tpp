---
// Hero Section Component
---

<!-- Enhanced Hero Section -->
<section class="hero-modern" role="banner" aria-labelledby="heroHeading">
  <div class="hero-background" aria-hidden="true">
    <div class="hero-gradient-mesh"></div>
    <div class="hero-floating-elements">
      <div class="floating-orb orb-1"></div>
      <div class="floating-orb orb-2"></div>
      <div class="floating-orb orb-3"></div>
    </div>
    <div class="hero-grid-overlay"></div>
  </div>
  <div class="container">
    <div class="hero-wrapper">
      <div class="hero-content-modern">
        <h1 id="heroHeading" class="hero-title-modern" data-aos="fade-up">
          <span class="title-line">Sydney's Local</span>
          <span class="title-gradient typing-effect" id="typewriter-text"></span>
          <span class="title-highlight">Fresh Approach, Proven Methods</span>
        </h1>
        <p class="hero-subtitle-modern" data-aos="fade-up" data-aos-delay="100">
          Dominate Google searches in
          <span class="location-highlight">Bondi</span>,
          <span class="location-highlight">Parramatta</span> &
          <span class="location-highlight">Penrith</span> across Greater Sydney.
          Founded 2024, I'm helping Sydney businesses get 2x more leads in 60 days with cutting-edge strategies.
        </p>
        <div class="hero-stats-modern" data-aos="fade-up" data-aos-delay="200">
          <div class="stat-card-modern">
            <div class="stat-icon-wrapper">
              <div class="stat-icon-bg"></div>
              <i class="fas fa-chart-line stat-icon"></i>
            </div>
            <div class="stat-content">
              <div class="stat-value"><span class="counter" data-target="247">247</span>%</div>
              <div class="stat-label">Revenue Increase</div>
            </div>
          </div>
          <div class="stat-card-modern">
            <div class="stat-icon-wrapper">
              <div class="stat-icon-bg"></div>
              <i class="fas fa-users stat-icon"></i>
            </div>
            <div class="stat-content">
              <div class="stat-value"><span class="counter" data-target="15">15</span>+</div>
              <div class="stat-label">Sydney Clients</div>
            </div>
          </div>
        </div>
        <div class="hero-cta-modern" data-aos="fade-up" data-aos-delay="300">
          <a href="/contact" class="cta-primary-modern">
            <span class="cta-content">
              <span class="cta-main">Claim Free $997 Audit</span>
              <span class="cta-sub">Only 5 spots left this week</span>
            </span>
            <span class="cta-arrow">
              <i class="fas fa-arrow-right"></i>
            </span>
            <div class="cta-glow"></div>
          </a>
          <a href="tel:+61487286451" class="cta-secondary-modern">
            <span class="cta-icon-pulse">
              <i class="fas fa-phone"></i>
            </span>
            <span class="cta-text">
              <span class="cta-label">Call Avi directly</span>
              <span class="cta-number">0487 286 451</span>
            </span>
          </a>
        </div>
        <div class="trust-badges-modern" data-aos="fade-up" data-aos-delay="400">
          <div class="trust-item">
            <i class="fas fa-star"></i>
            <span>4.9â˜… Rating</span>
          </div>
          <div class="trust-divider"></div>
          <div class="trust-item">
            <i class="fas fa-award"></i>
            <span>No Lock-in Contracts</span>
          </div>
        </div>
      </div>
      <div class="hero-visual-modern" data-aos="fade-left" data-aos-delay="200">
        <div class="visual-container">
          <div class="visual-frame">
            <img src="https://storage.googleapis.com/msgsndr/El8AYzrtJG3nVg76QPpa/media/68b56f98291670614001dfbf.png" alt="Digital Marketing Dashboard showing impressive growth results" class="hero-dashboard-image" loading="eager" fetchpriority="high">
            <div class="visual-overlay"></div>
          </div>
          <div class="floating-metric metric-1">
            <div class="metric-icon">
              <i class="fas fa-arrow-trend-up"></i>
            </div>
            <div class="metric-content">
              <div class="metric-value">2x</div>
              <div class="metric-label">More Leads</div>
            </div>
          </div>
          <div class="floating-metric metric-2">
            <div class="metric-icon">
              <i class="fas fa-user-plus"></i>
            </div>
            <div class="metric-content">
              <div class="metric-value">67</div>
              <div class="metric-label">New Leads/Month</div>
            </div>
          </div>
          <div class="floating-metric metric-3">
            <div class="metric-icon">
              <i class="fas fa-dollar-sign"></i>
            </div>
            <div class="metric-content">
              <div class="metric-value">15x</div>
              <div class="metric-label">ROI Average</div>
            </div>
          </div>
        </div>
        <div class="visual-decoration">
          <svg viewBox="0 0 200 200" xmlns="http://www.w3.org/2000/svg" class="decoration-blob">
            <path fill="url(#gradient)" d="M47.3,-57.2C59.9,-47.1,67.7,-30.8,69.8,-13.8C71.9,3.2,68.3,20.9,59.5,35.1C50.7,49.3,36.7,60,21.2,64.5C5.7,69,-11.3,67.3,-26.8,61.2C-42.3,55.1,-56.3,44.6,-63.4,30.3C-70.5,16,-70.7,-2.1,-65.2,-18.1C-59.7,-34.1,-48.5,-48,-35.2,-57.9C-21.8,-67.8,-6.3,-73.7,7,-72.8C20.3,-71.9,34.7,-64.3,47.3,-57.2Z" transform="translate(100 100)"></path>
            <defs>
              <linearGradient id="gradient">
                <stop offset="0%" stop-color="#2c86f9" stop-opacity="0.3"></stop>
                <stop offset="100%" stop-color="#60a5fa" stop-opacity="0.1"></stop>
              </linearGradient>
            </defs>
          </svg>
        </div>
      </div>
    </div>
  </div>
</section>

<style>
.typing-effect {
  display: inline-block;
  min-height: 2.4em;
  position: relative;
  line-height: 1.2;
}

.typewriter-cursor {
  animation: blink 1s infinite;
  color: #3B82F6;
  font-weight: 300;
  margin-left: 2px;
  display: inline-block;
}

.typing-text {
  background: linear-gradient(135deg, #3B82F6 0%, #1E40AF 100%);
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  background-clip: text;
  display: inline-block;
  animation: textGlow 2s ease-in-out infinite alternate;
}

@keyframes blink {
  0%, 50% { opacity: 1; }
  51%, 100% { opacity: 0; }
}

@keyframes fadeOut {
  to { opacity: 0; }
}

@keyframes textGlow {
  0% {
    text-shadow: 0 0 10px rgba(102, 126, 234, 0.3);
    transform: translateY(0px);
  }
  100% {
    text-shadow: 0 0 20px rgba(118, 75, 162, 0.5);
    transform: translateY(-1px);
  }
}

@keyframes typeIn {
  from {
    width: 0;
    opacity: 0;
  }
  to {
    width: 100%;
    opacity: 1;
  }
}

.typing-char {
  display: inline-block;
  animation: charPop 0.3s ease forwards;
  opacity: 0;
}

@keyframes charPop {
  0% {
    opacity: 0;
    transform: translateY(10px) scale(0.8);
  }
  50% {
    transform: translateY(-2px) scale(1.1);
  }
  100% {
    opacity: 1;
    transform: translateY(0) scale(1);
  }
}
</style>

<script>
// Enhanced typing effect for Small Business Marketing Expert
document.addEventListener('DOMContentLoaded', function() {
  const targetElement = document.querySelector('#typewriter-text');
  if (!targetElement) return;

  const phrases = [
    'Small Business\nMarketing Expert',
    'Digital Growth\nSpecialist',
    'SEO & Google Ads\nExpert',
    'Revenue Growth\nAccelerator'
  ];

  let currentPhraseIndex = 0;
  let charIndex = 0;
  let isDeleting = false;

  // Clear initial content and setup structure
  targetElement.innerHTML = '<strong class="typing-text"></strong>';
  const textContainer = targetElement.querySelector('.typing-text');

  // Create cursor
  const cursor = document.createElement('span');
  cursor.className = 'typewriter-cursor';
  cursor.textContent = '|';
  targetElement.appendChild(cursor);

  function typeEffect() {
    const currentPhrase = phrases[currentPhraseIndex];

    if (!isDeleting) {
      // Typing
      if (charIndex <= currentPhrase.length) {
        const textToShow = currentPhrase.substring(0, charIndex);
        // Handle HTML entities and line breaks properly
        let processedText = '';
        let realCharIndex = 0;

        // Split by newline to handle line breaks properly
        const parts = textToShow.split('\n');

        for (let partIndex = 0; partIndex < parts.length; partIndex++) {
          const part = parts[partIndex];

          // Add characters from this part
          for (let i = 0; i < part.length; i++) {
            const char = part[i];
            const displayChar = char === ' ' ? '&nbsp;' : char;
            processedText += `<span class="typing-char" style="animation-delay: ${realCharIndex * 0.05}s">${displayChar}</span>`;
            realCharIndex++;
          }

          // Add line break if not the last part
          if (partIndex < parts.length - 1) {
            processedText += '<br>';
          }
        }

        textContainer.innerHTML = processedText;
        charIndex++;
        setTimeout(typeEffect, 100);
      } else {
        // Pause before deleting (only for rotating phrases)
        if (phrases.length > 1) {
          setTimeout(() => {
            isDeleting = true;
            typeEffect();
          }, 2000);
        } else {
          // Single phrase - just remove cursor after delay
          setTimeout(() => {
            cursor.style.animation = 'fadeOut 0.5s forwards';
            setTimeout(() => cursor.remove(), 500);
          }, 1500);
        }
      }
    } else {
      // Deleting
      if (charIndex > 0) {
        const textToShow = currentPhrase.substring(0, charIndex - 1);
        // Handle HTML entities and line breaks properly during deletion
        let processedText = '';
        let realCharIndex = 0;

        // Split by newline to handle line breaks properly during deletion
        const parts = textToShow.split('\n');

        for (let partIndex = 0; partIndex < parts.length; partIndex++) {
          const part = parts[partIndex];

          // Add characters from this part
          for (let i = 0; i < part.length; i++) {
            const char = part[i];
            const displayChar = char === ' ' ? '&nbsp;' : char;
            processedText += `<span class="typing-char">${displayChar}</span>`;
            realCharIndex++;
          }

          // Add line break if not the last part
          if (partIndex < parts.length - 1) {
            processedText += '<br>';
          }
        }

        textContainer.innerHTML = processedText;
        charIndex--;
        setTimeout(typeEffect, 50);
      } else {
        // Move to next phrase
        isDeleting = false;
        currentPhraseIndex = (currentPhraseIndex + 1) % phrases.length;
        setTimeout(typeEffect, 500);
      }
    }
  }

  // Start typing after a delay
  setTimeout(() => {
    typeEffect();
  }, 1200);

  // Add glow effect to the text container
  textContainer.style.background = 'linear-gradient(135deg, #3B82F6 0%, #1E40AF 100%)';
  textContainer.style.webkitBackgroundClip = 'text';
  textContainer.style.webkitTextFillColor = 'transparent';
  textContainer.style.backgroundClip = 'text';
});
</script>