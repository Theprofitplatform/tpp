---
interface Props {
  staticText: string;
  typingWords: string[];
  subtitle: string;
  cta?: { label: string; href: string };
  secondaryCta?: { label: string; href: string };
}

const { staticText, typingWords, subtitle, cta, secondaryCta } = Astro.props;
---

<div class="typing-hero">
  <div class="typing-hero-content">
    <h1 class="typing-hero-title">
      {staticText}
      <span class="typing-text" data-words={JSON.stringify(typingWords)}></span>
      <span class="cursor">|</span>
    </h1>
    <p class="typing-hero-subtitle">{subtitle}</p>
    <div class="typing-hero-actions">
      {cta && (
        <a href={cta.href} class="btn-primary">
          {cta.label}
        </a>
      )}
      {secondaryCta && (
        <a href={secondaryCta.href} class="btn-secondary">
          {secondaryCta.label}
        </a>
      )}
    </div>
  </div>
</div>

<style>
  .typing-hero {
    background: linear-gradient(135deg, #3B82F6 0%, #2563EB 50%, #1E40AF 100%);
    padding: 100px 20px;
    text-align: center;
    position: relative;
    overflow: hidden;
  }

  .typing-hero::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: radial-gradient(circle at 30% 50%, rgba(96, 165, 250, 0.3) 0%, transparent 60%);
  }

  .typing-hero-content {
    position: relative;
    max-width: 1200px;
    margin: 0 auto;
  }

  .typing-hero-title {
    font-size: 3.5rem;
    font-weight: 900;
    color: white;
    margin: 0 0 24px;
    line-height: 1.2;
    letter-spacing: -0.02em;
  }

  .typing-text {
    background: linear-gradient(90deg, #60A5FA, #93C5FD);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
    display: inline-block;
    min-width: 200px;
    text-align: left;
  }

  .cursor {
    color: #60A5FA;
    animation: blink 1s infinite;
  }

  @keyframes blink {
    0%, 50% { opacity: 1; }
    51%, 100% { opacity: 0; }
  }

  .typing-hero-subtitle {
    font-size: 1.25rem;
    color: rgba(255, 255, 255, 0.9);
    margin: 0 auto 40px;
    max-width: 700px;
    line-height: 1.6;
  }

  .typing-hero-actions {
    display: flex;
    gap: 16px;
    justify-content: center;
    flex-wrap: wrap;
  }

  .btn-primary {
    padding: 16px 32px;
    background: white;
    color: #1E40AF;
    font-weight: 700;
    border-radius: 12px;
    text-decoration: none;
    transition: all 0.3s ease;
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.2);
  }

  .btn-primary:hover {
    transform: translateY(-2px);
    box-shadow: 0 8px 30px rgba(0, 0, 0, 0.3);
  }

  .btn-secondary {
    padding: 16px 32px;
    background: rgba(255, 255, 255, 0.1);
    color: white;
    font-weight: 600;
    border-radius: 12px;
    text-decoration: none;
    border: 2px solid rgba(255, 255, 255, 0.3);
    transition: all 0.3s ease;
    backdrop-filter: blur(10px);
  }

  .btn-secondary:hover {
    background: rgba(255, 255, 255, 0.2);
    border-color: rgba(255, 255, 255, 0.5);
  }

  @media (max-width: 768px) {
    .typing-hero {
      padding: 80px 20px;
    }

    .typing-hero-title {
      font-size: 2rem;
    }

    .typing-hero-subtitle {
      font-size: 1rem;
    }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const typingElement = document.querySelector('.typing-text') as HTMLElement;
    if (!typingElement) return;

    const words = JSON.parse(typingElement.dataset.words || '[]');
    let wordIndex = 0;
    let charIndex = 0;
    let isDeleting = false;
    let typingSpeed = 150;

    function type() {
      const currentWord = words[wordIndex];

      if (isDeleting) {
        typingElement.textContent = currentWord.substring(0, charIndex - 1);
        charIndex--;
        typingSpeed = 50;
      } else {
        typingElement.textContent = currentWord.substring(0, charIndex + 1);
        charIndex++;
        typingSpeed = 150;
      }

      if (!isDeleting && charIndex === currentWord.length) {
        typingSpeed = 2000;
        isDeleting = true;
      } else if (isDeleting && charIndex === 0) {
        isDeleting = false;
        wordIndex = (wordIndex + 1) % words.length;
        typingSpeed = 500;
      }

      setTimeout(type, typingSpeed);
    }

    type();
  });
</script>