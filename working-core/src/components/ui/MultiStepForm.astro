---
/**
 * MultiStepForm Component
 * Multi-step form with progress indicator and validation
 *
 * @prop {string} formAction - Form submission endpoint
 * @prop {Array} steps - Form steps configuration
 *
 * Example:
 * <MultiStepForm
 *   formAction="/api/leads"
 *   steps={[
 *     {
 *       title: "Select Service",
 *       fields: [
 *         { name: "service", type: "radio", options: ["SEO", "Google Ads"], required: true }
 *       ]
 *     },
 *     {
 *       title: "Your Details",
 *       fields: [
 *         { name: "name", type: "text", label: "Name", required: true },
 *         { name: "email", type: "email", label: "Email", required: true }
 *       ]
 *     }
 *   ]}
 * />
 */

interface Field {
  name: string;
  type: string;
  label?: string;
  placeholder?: string;
  options?: string[];
  required?: boolean;
}

interface Step {
  title: string;
  description?: string;
  fields: Field[];
}

interface Props {
  formAction: string;
  steps: Step[];
}

const { formAction, steps } = Astro.props;
---

<div class="bg-white rounded-2xl shadow-xl p-8 max-w-2xl mx-auto" data-multistep-form>
  <!-- Progress Bar -->
  <div class="mb-8">
    <div class="flex items-center justify-between mb-2">
      {steps.map((step, index) => (
        <div class="flex items-center flex-1">
          <div
            class:list={[
              'w-10 h-10 rounded-full flex items-center justify-center font-bold transition-colors',
              index === 0 ? 'bg-blue-600 text-white' : 'bg-gray-200 text-gray-500'
            ]}
            data-step-indicator={index}
          >
            {index + 1}
          </div>
          {index < steps.length - 1 && (
            <div class="flex-1 h-1 mx-2 bg-gray-200" data-progress-bar={index}></div>
          )}
        </div>
      ))}
    </div>
    <p class="text-sm text-gray-600 text-center" data-step-text>
      Step 1 of {steps.length}: {steps[0].title}
    </p>
  </div>

  <!-- Form -->
  <form action={formAction} method="POST" data-form>
    {steps.map((step, stepIndex) => (
      <div
        class={stepIndex === 0 ? '' : 'hidden'}
        data-step={stepIndex}
      >
        <h2 class="text-2xl font-bold text-gray-900 mb-2">{step.title}</h2>
        {step.description && (
          <p class="text-gray-600 mb-6">{step.description}</p>
        )}

        <div class="space-y-4">
          {step.fields.map((field) => (
            <div>
              {field.type === 'radio' ? (
                <fieldset>
                  <legend class="block text-sm font-semibold text-gray-900 mb-3">
                    {field.label} {field.required && <span class="text-red-500">*</span>}
                  </legend>
                  <div class="space-y-2">
                    {field.options?.map((option) => (
                      <label class="flex items-center gap-3 p-4 border-2 border-gray-200 rounded-lg hover:border-blue-600 cursor-pointer transition-colors">
                        <input
                          type="radio"
                          name={field.name}
                          value={option}
                          required={field.required}
                          class="w-5 h-5 text-blue-600 focus:ring-2 focus:ring-blue-600"
                        />
                        <span class="font-medium text-gray-900">{option}</span>
                      </label>
                    ))}
                  </div>
                </fieldset>
              ) : (
                <>
                  <label for={field.name} class="block text-sm font-semibold text-gray-900 mb-2">
                    {field.label} {field.required && <span class="text-red-500">*</span>}
                  </label>
                  <input
                    type={field.type}
                    id={field.name}
                    name={field.name}
                    placeholder={field.placeholder}
                    required={field.required}
                    class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-600 focus:border-transparent"
                  />
                </>
              )}
            </div>
          ))}
        </div>

        <!-- Navigation Buttons -->
        <div class="flex gap-4 mt-8">
          {stepIndex > 0 && (
            <button
              type="button"
              class="px-6 py-3 border-2 border-gray-300 text-gray-700 font-semibold rounded-lg hover:bg-gray-50 transition-colors"
              data-prev-btn
            >
              Back
            </button>
          )}

          {stepIndex < steps.length - 1 ? (
            <button
              type="button"
              class="flex-1 px-6 py-3 bg-blue-600 text-white font-semibold rounded-lg hover:bg-blue-700 transition-colors"
              data-next-btn
            >
              Next Step
            </button>
          ) : (
            <button
              type="submit"
              class="flex-1 px-6 py-3 bg-green-600 text-white font-semibold rounded-lg hover:bg-green-700 transition-colors"
            >
              Submit
            </button>
          )}
        </div>
      </div>
    ))}
  </form>
</div>

<script>
  document.querySelectorAll('[data-multistep-form]').forEach((formContainer) => {
    const form = formContainer.querySelector('[data-form]') as HTMLFormElement;
    const steps = formContainer.querySelectorAll('[data-step]');
    const indicators = formContainer.querySelectorAll('[data-step-indicator]');
    const progressBars = formContainer.querySelectorAll('[data-progress-bar]');
    const stepText = formContainer.querySelector('[data-step-text]');
    let currentStep = 0;

    const updateUI = () => {
      // Hide all steps
      steps.forEach((step, index) => {
        (step as HTMLElement).classList.toggle('hidden', index !== currentStep);
      });

      // Update indicators
      indicators.forEach((indicator, index) => {
        if (index <= currentStep) {
          indicator.classList.remove('bg-gray-200', 'text-gray-500');
          indicator.classList.add('bg-blue-600', 'text-white');
        }
      });

      // Update progress bars
      progressBars.forEach((bar, index) => {
        if (index < currentStep) {
          (bar as HTMLElement).classList.add('bg-blue-600');
        }
      });

      // Update text
      if (stepText) {
        const totalSteps = steps.length;
        const stepTitle = (steps[currentStep] as HTMLElement).querySelector('h2')?.textContent || '';
        stepText.textContent = `Step ${currentStep + 1} of ${totalSteps}: ${stepTitle}`;
      }
    };

    // Next button handlers
    formContainer.querySelectorAll('[data-next-btn]').forEach((btn) => {
      btn.addEventListener('click', () => {
        const currentStepEl = steps[currentStep] as HTMLElement;
        const inputs = currentStepEl.querySelectorAll('input[required], select[required]');
        let isValid = true;

        inputs.forEach((input) => {
          if (!(input as HTMLInputElement).checkValidity()) {
            isValid = false;
            (input as HTMLInputElement).reportValidity();
          }
        });

        if (isValid && currentStep < steps.length - 1) {
          currentStep++;
          updateUI();
        }
      });
    });

    // Previous button handlers
    formContainer.querySelectorAll('[data-prev-btn]').forEach((btn) => {
      btn.addEventListener('click', () => {
        if (currentStep > 0) {
          currentStep--;
          updateUI();
        }
      });
    });
  });
</script>